{"ast":null,"code":"import { FormControl, FormGroup } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nexport class EditAddressComponent {\n  constructor() {\n    this.submitted = false;\n    this.addressId = 0;\n    this.IschangeAddress = false;\n    this.AddressForm = new FormGroup({\n      addressId: new FormControl(''),\n      house: new FormControl(''),\n      street: new FormControl(''),\n      city: new FormControl(''),\n      state: new FormControl(''),\n      country: new FormControl(''),\n      zipCode: new FormControl(''),\n      type: new FormControl('')\n    });\n    this.UserId = Number(localStorage.getItem('userId'));\n    this.OrderId = 0;\n  } //   constructor(public AddressService: AddressService,\n  //     private formBuilder: FormBuilder,\n  //     public route: ActivatedRoute) { }\n  //   get f(): { [key: string]: AbstractControl } {\n  //     return this.AddressForm.controls;\n  //   }\n  //   onReset(): void {\n  //     this.submitted = false;\n  //     this.AddressForm.reset();\n  //   }\n  //   async onSubmit(formValues: any) {\n  //     this.submitted = true;\n  //     if (this.AddressForm.invalid) {\n  //       return;\n  //     }\n  //     const formValue = { ...formValues };\n  //     var AddressDetails: InModel = new InModel();\n  //     AddressDetails.In.house = formValue.house;\n  //     AddressDetails.In.street = formValue.street;\n  //     AddressDetails.In.city = formValue.city;\n  //     AddressDetails.In.state = formValue.state;\n  //     AddressDetails.In.country = formValue.country;\n  //     AddressDetails.In.zipCode = formValue.zipCode;\n  //     AddressDetails.In.addressType = formValue.type;\n  //     this.route.paramMap.subscribe(async params => {\n  //       var id = Number(params.get('id'));\n  //       AddressDetails.In.orderId = id;\n  //     });\n  //     AddressDetails.In.userId = Number(localStorage.getItem(\"userId\"));\n  //     if(this.IschangeAddress==false && this.addressId==0){\n  // debugger\n  //       await this.AddressService.add(AddressDetails).subscribe({\n  //         next:res => {\n  //           document.getElementById(\"success-alert\")!.style.display = \"block\";\n  //           document.getElementById(\"danger-alert\")!.style.display = \"none\";\n  //           document.getElementById(\"success-alert\")!.innerHTML = \"added successfully\";\n  //           document.getElementById('submitAddress')!.innerHTML = 'change address';\n  //           this.IschangeAddress = true;\n  //           console.log(\"address id\"+res);\n  //           this.addressId = res;\n  //         },\n  //         error: (err: HttpErrorResponse) => {\n  //           document.getElementById(\"danger-alert\")!.style.display = \"block\";\n  //           document.getElementById(\"danger-alert\")!.innerHTML = \"something went wrong\";\n  //         }\n  //       })\n  //     }\n  //     else {\n  //       debugger\n  //       AddressDetails.In.id = Number(this.addressId);\n  //       await this.AddressService.update(AddressDetails).subscribe({\n  //         next: (_) => {\n  //           document.getElementById(\"success-alert\")!.style.display = \"block\";\n  //           document.getElementById(\"danger-alert\")!.style.display = \"none\";\n  //           document.getElementById(\"success-alert\")!.innerHTML = \"updated successfully\";\n  //           document.getElementById(\"submitAddress\")!.innerHTML = \"change Address\";\n  //           this.IschangeAddress = true;\n  //         },\n  //         error: (err: HttpErrorResponse) => {\n  //           document.getElementById(\"danger-alert\")!.style.display = \"block\";\n  //           document.getElementById(\"danger-alert\")!.innerHTML = \"something went wrong\";\n  //         }\n  //       })\n  //     }\n  //   }\n  //   async setValuesInForm(res: any) {\n  //     //this.AddressForm.controls[\"addressId\"].setValue(res.id);\n  //     this.AddressForm.controls[\"house\"].setValue(res.house);\n  //     this.AddressForm.controls[\"street\"].setValue(res.street);\n  //     this.AddressForm.controls[\"city\"].setValue(res.city);\n  //     this.AddressForm.controls[\"state\"].setValue(res.state);\n  //     this.AddressForm.controls[\"country\"].setValue(res.country);\n  //     this.AddressForm.controls[\"zipCode\"].setValue(res.zipCode);\n  //     this.AddressForm.controls[\"type\"].setValue(res.addressType);\n  //     //this.addressId = res.id;\n  //   }\n  //   async initialValues(addressId: number) {\n  //     await this.AddressService.getById(addressId).subscribe(\n  //       async res => {\n  //         await this.setValuesInForm(res);\n  //       }\n  //     )\n  //   }\n  //   async addressesOfUser(userId: number) {\n  //     this.AddressService.getAllByUserId(userId).subscribe(res => {\n  //       this.addressList = res;\n  //     });\n  //   }\n  //   async onClickShowAddress(addressId: number) {\n  //     await this.AddressService.getById(addressId).subscribe(async res => {\n  //       await this.setValuesInForm(res);\n  //     })\n  //   }\n  //   checkAddressOnInit(){\n  //     debugger\n  //     this.route.paramMap.subscribe(async params => {\n  //       var id = Number(params.get('id'));\n  //           this.AddressService.getByOrderId(id).subscribe( res=>{\n  //              if(res){\n  //               this.setValuesInForm(res);\n  //               document.getElementById('submitAddress')!.innerHTML = 'change address';\n  //               this.IschangeAddress = true;\n  //               this.addressId = res.id;\n  //              }\n  //           })\n  //     });\n  //   }\n  //   ngOnInit(): void {\n  //     this.AddressForm = this.formBuilder.group({\n  //       addressId:[''],\n  //       house: ['', [Validators.required]],\n  //       city: ['', [Validators.required]],\n  //       street: ['', [Validators.required]],\n  //       state: ['', [Validators.required]],\n  //       country: ['', [Validators.required]],\n  //       zipCode: ['', [Validators.required]],\n  //       type: ['', [Validators.required]],\n  //     });\n  //     this.addressesOfUser(this.UserId);\n  //     this.checkAddressOnInit();\n  //   }\n  // }\n  // class InModel {\n  //   In: AddressModel = new AddressModel();\n\n\n  ngOnInit() {}\n\n}\n\nEditAddressComponent.ɵfac = function EditAddressComponent_Factory(t) {\n  return new (t || EditAddressComponent)();\n};\n\nEditAddressComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditAddressComponent,\n  selectors: [[\"app-edit-address\"]],\n  decls: 0,\n  vars: 0,\n  template: function EditAddressComponent_Template(rf, ctx) {},\n  styles: [\".container[_ngcontent-%COMP%]{\\r\\n    padding-top: 30px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVkaXQtYWRkcmVzcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksaUJBQWlCO0FBQ3JCIiwiZmlsZSI6ImVkaXQtYWRkcmVzcy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lcntcclxuICAgIHBhZGRpbmctdG9wOiAzMHB4O1xyXG59XHJcbiJdfQ== */\"]\n});","map":{"version":3,"sources":["C:/Users/R9/Desktop/AnyBuyStoreAngularUi/AnyBuyStoreUi/AnyBuyStoreUi/src/app/edit-address/edit-address.component.ts"],"names":["FormControl","FormGroup","i0","EditAddressComponent","constructor","submitted","addressId","IschangeAddress","AddressForm","house","street","city","state","country","zipCode","type","UserId","Number","localStorage","getItem","OrderId","ngOnInit","ɵfac","EditAddressComponent_Factory","t","ɵcmp","ɵɵdefineComponent","selectors","decls","vars","template","EditAddressComponent_Template","rf","ctx","styles"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,gBAAvC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,oBAAN,CAA2B;AAC9BC,EAAAA,WAAW,GAAG;AACV,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKC,WAAL,GAAmB,IAAIP,SAAJ,CAAc;AAC7BK,MAAAA,SAAS,EAAE,IAAIN,WAAJ,CAAgB,EAAhB,CADkB;AAE7BS,MAAAA,KAAK,EAAE,IAAIT,WAAJ,CAAgB,EAAhB,CAFsB;AAG7BU,MAAAA,MAAM,EAAE,IAAIV,WAAJ,CAAgB,EAAhB,CAHqB;AAI7BW,MAAAA,IAAI,EAAE,IAAIX,WAAJ,CAAgB,EAAhB,CAJuB;AAK7BY,MAAAA,KAAK,EAAE,IAAIZ,WAAJ,CAAgB,EAAhB,CALsB;AAM7Ba,MAAAA,OAAO,EAAE,IAAIb,WAAJ,CAAgB,EAAhB,CANoB;AAO7Bc,MAAAA,OAAO,EAAE,IAAId,WAAJ,CAAgB,EAAhB,CAPoB;AAQ7Be,MAAAA,IAAI,EAAE,IAAIf,WAAJ,CAAgB,EAAhB;AARuB,KAAd,CAAnB;AAUA,SAAKgB,MAAL,GAAcC,MAAM,CAACC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAD,CAApB;AACA,SAAKC,OAAL,GAAe,CAAf;AACH,GAjB6B,CAkiJlClB,oBAAoB,CAACmB,IAArB,GAA4B,SAASC,4BAAT,CAAsCC,CAAtC,EAAyC;AAAE,SAAO,KAAKA,CAAC,IAAIrB,oBAAV,GAAP;AAA2C,CAAlH;;AACAA,oBAAoB,CAACsB,IAArB,GAA4B,aAAcvB,EAAE,CAACwB,iBAAH,CAAqB;AAAEX,EAAAA,IAAI,EAAEZ,oBAAR;AAA8BwB,EAAAA,SAAS,EAAE,CAAC,CAAC,kBAAD,CAAD,CAAzC;AAAiEC,EAAAA,KAAK,EAAE,CAAxE;AAA2EC,EAAAA,IAAI,EAAE,CAAjF;AAAoFC,EAAAA,QAAQ,EAAE,SAASC,6BAAT,CAAuCC,EAAvC,EAA2CC,GAA3C,EAAgD,CAAG,CAAjJ;AAAmJC,EAAAA,MAAM,EAAE,CAAC,0YAAD;AAA3J,CAArB,CAA1C","sourcesContent":["import { FormControl, FormGroup } from '@angular/forms';\r\nimport * as i0 from \"@angular/core\";\r\nexport class EditAddressComponent {\r\n    constructor() {\r\n        this.submitted = false;\r\n        this.addressId = 0;\r\n        this.IschangeAddress = false;\r\n        this.AddressForm = new FormGroup({\r\n            addressId: new FormControl(''),\r\n            house: new FormControl(''),\r\n            street: new FormControl(''),\r\n            city: new FormControl(''),\r\n            state: new FormControl(''),\r\n            country: new FormControl(''),\r\n            zipCode: new FormControl(''),\r\n            type: new FormControl(''),\r\n        });\r\n        this.UserId = Number(localStorage.getItem('userId'));\r\n        this.OrderId = 0;\r\n    }\r\n    //   constructor(public AddressService: AddressService,\r\n    //     private formBuilder: FormBuilder,\r\n    //     public route: ActivatedRoute) { }\r\n    //   get f(): { [key: string]: AbstractControl } {\r\n    //     return this.AddressForm.controls;\r\n    //   }\r\n    //   onReset(): void {\r\n    //     this.submitted = false;\r\n    //     this.AddressForm.reset();\r\n    //   }\r\n    //   async onSubmit(formValues: any) {\r\n    //     this.submitted = true;\r\n    //     if (this.AddressForm.invalid) {\r\n    //       return;\r\n    //     }\r\n    //     const formValue = { ...formValues };\r\n    //     var AddressDetails: InModel = new InModel();\r\n    //     AddressDetails.In.house = formValue.house;\r\n    //     AddressDetails.In.street = formValue.street;\r\n    //     AddressDetails.In.city = formValue.city;\r\n    //     AddressDetails.In.state = formValue.state;\r\n    //     AddressDetails.In.country = formValue.country;\r\n    //     AddressDetails.In.zipCode = formValue.zipCode;\r\n    //     AddressDetails.In.addressType = formValue.type;\r\n    //     this.route.paramMap.subscribe(async params => {\r\n    //       var id = Number(params.get('id'));\r\n    //       AddressDetails.In.orderId = id;\r\n    //     });\r\n    //     AddressDetails.In.userId = Number(localStorage.getItem(\"userId\"));\r\n    //     if(this.IschangeAddress==false && this.addressId==0){\r\n    // debugger\r\n    //       await this.AddressService.add(AddressDetails).subscribe({\r\n    //         next:res => {\r\n    //           document.getElementById(\"success-alert\")!.style.display = \"block\";\r\n    //           document.getElementById(\"danger-alert\")!.style.display = \"none\";\r\n    //           document.getElementById(\"success-alert\")!.innerHTML = \"added successfully\";\r\n    //           document.getElementById('submitAddress')!.innerHTML = 'change address';\r\n    //           this.IschangeAddress = true;\r\n    //           console.log(\"address id\"+res);\r\n    //           this.addressId = res;\r\n    //         },\r\n    //         error: (err: HttpErrorResponse) => {\r\n    //           document.getElementById(\"danger-alert\")!.style.display = \"block\";\r\n    //           document.getElementById(\"danger-alert\")!.innerHTML = \"something went wrong\";\r\n    //         }\r\n    //       })\r\n    //     }\r\n    //     else {\r\n    //       debugger\r\n    //       AddressDetails.In.id = Number(this.addressId);\r\n    //       await this.AddressService.update(AddressDetails).subscribe({\r\n    //         next: (_) => {\r\n    //           document.getElementById(\"success-alert\")!.style.display = \"block\";\r\n    //           document.getElementById(\"danger-alert\")!.style.display = \"none\";\r\n    //           document.getElementById(\"success-alert\")!.innerHTML = \"updated successfully\";\r\n    //           document.getElementById(\"submitAddress\")!.innerHTML = \"change Address\";\r\n    //           this.IschangeAddress = true;\r\n    //         },\r\n    //         error: (err: HttpErrorResponse) => {\r\n    //           document.getElementById(\"danger-alert\")!.style.display = \"block\";\r\n    //           document.getElementById(\"danger-alert\")!.innerHTML = \"something went wrong\";\r\n    //         }\r\n    //       })\r\n    //     }\r\n    //   }\r\n    //   async setValuesInForm(res: any) {\r\n    //     //this.AddressForm.controls[\"addressId\"].setValue(res.id);\r\n    //     this.AddressForm.controls[\"house\"].setValue(res.house);\r\n    //     this.AddressForm.controls[\"street\"].setValue(res.street);\r\n    //     this.AddressForm.controls[\"city\"].setValue(res.city);\r\n    //     this.AddressForm.controls[\"state\"].setValue(res.state);\r\n    //     this.AddressForm.controls[\"country\"].setValue(res.country);\r\n    //     this.AddressForm.controls[\"zipCode\"].setValue(res.zipCode);\r\n    //     this.AddressForm.controls[\"type\"].setValue(res.addressType);\r\n    //     //this.addressId = res.id;\r\n    //   }\r\n    //   async initialValues(addressId: number) {\r\n    //     await this.AddressService.getById(addressId).subscribe(\r\n    //       async res => {\r\n    //         await this.setValuesInForm(res);\r\n    //       }\r\n    //     )\r\n    //   }\r\n    //   async addressesOfUser(userId: number) {\r\n    //     this.AddressService.getAllByUserId(userId).subscribe(res => {\r\n    //       this.addressList = res;\r\n    //     });\r\n    //   }\r\n    //   async onClickShowAddress(addressId: number) {\r\n    //     await this.AddressService.getById(addressId).subscribe(async res => {\r\n    //       await this.setValuesInForm(res);\r\n    //     })\r\n    //   }\r\n    //   checkAddressOnInit(){\r\n    //     debugger\r\n    //     this.route.paramMap.subscribe(async params => {\r\n    //       var id = Number(params.get('id'));\r\n    //           this.AddressService.getByOrderId(id).subscribe( res=>{\r\n    //              if(res){\r\n    //               this.setValuesInForm(res);\r\n    //               document.getElementById('submitAddress')!.innerHTML = 'change address';\r\n    //               this.IschangeAddress = true;\r\n    //               this.addressId = res.id;\r\n    //              }\r\n    //           })\r\n    //     });\r\n    //   }\r\n    //   ngOnInit(): void {\r\n    //     this.AddressForm = this.formBuilder.group({\r\n    //       addressId:[''],\r\n    //       house: ['', [Validators.required]],\r\n    //       city: ['', [Validators.required]],\r\n    //       street: ['', [Validators.required]],\r\n    //       state: ['', [Validators.required]],\r\n    //       country: ['', [Validators.required]],\r\n    //       zipCode: ['', [Validators.required]],\r\n    //       type: ['', [Validators.required]],\r\n    //     });\r\n    //     this.addressesOfUser(this.UserId);\r\n    //     this.checkAddressOnInit();\r\n    //   }\r\n    // }\r\n    // class InModel {\r\n    //   In: AddressModel = new AddressModel();\r\n    ngOnInit() {\r\n    }\r\n}\r\nEditAddressComponent.ɵfac = function EditAddressComponent_Factory(t) { return new (t || EditAddressComponent)(); };\r\nEditAddressComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: EditAddressComponent, selectors: [[\"app-edit-address\"]], decls: 0, vars: 0, template: function EditAddressComponent_Template(rf, ctx) { }, styles: [\".container[_ngcontent-%COMP%]{\\r\\n    padding-top: 30px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVkaXQtYWRkcmVzcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksaUJBQWlCO0FBQ3JCIiwiZmlsZSI6ImVkaXQtYWRkcmVzcy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lcntcclxuICAgIHBhZGRpbmctdG9wOiAzMHB4O1xyXG59XHJcbiJdfQ== */\"] });\r\n"]},"metadata":{},"sourceType":"module"}